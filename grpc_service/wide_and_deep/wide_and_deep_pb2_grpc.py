# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import pickle
import json

import logging
logging.basicConfig(format="%(asctime)s-%(name)s-%(levelname)s-%(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

import numpy as np
from google.protobuf.json_format import MessageToJson


import tensorflow as tf

import grpc

import grpc_service.wide_and_deep.wide_and_deep_pb2 as wide__and__deep__pb2


class WideAndDeepGrpcStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/WideAndDeepGrpc/Predict',
                request_serializer=wide__and__deep__pb2.Adult.SerializeToString,
                response_deserializer=wide__and__deep__pb2.SingleResponse.FromString,
                )


class WideAndDeepGrpcServicer(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, model_json, model_weights, encoder, wide_cols, deep_cols, label_config):
        with open(model_json, "r") as json_file:
            self.model = tf.keras.models.model_from_json(json_file.read())
        self.model.load_weights(model_weights)

        with open(encoder, 'rb') as f:
            self.enc = pickle.load(f)

        self.wide_cols = wide_cols
        self.deep_cols = deep_cols

        self.label_config = label_config

    def Predict(self, request, context):
        logger.info("Request: {}".format(request))
        req_dict = json.loads(MessageToJson(request))
        # linear_inputs = np.array([[req_dict.get(col) for col in self.wide_cols]])
        linear_inputs = np.array([[req_dict.get(col, "") for col in self.wide_cols]]) # default "" for string
        linear_inputs = self.enc.transform(linear_inputs)
        # dnn_inputs = np.array([[req_dict.get(col) for col in self.deep_cols]])
        dnn_inputs = np.array([[req_dict.get(col, 0) for col in self.deep_cols]]) # default 0 for int32
        pred_prob = self.model.predict([linear_inputs, dnn_inputs]).tolist()[0][0]
        pred_class = self.label_config.get(1) if pred_prob > self.label_config.get(
            "threshold") else self.label_config.get(0)
        result = wide__and__deep__pb2.SingleResult(category=pred_class, prob=pred_prob)
        logger.info("Request success!")
        return wide__and__deep__pb2.SingleResponse(code=200, data=result, msg="success")


def add_WideAndDeepGrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=wide__and__deep__pb2.Adult.FromString,
                    response_serializer=wide__and__deep__pb2.SingleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WideAndDeepGrpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WideAndDeepGrpc(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WideAndDeepGrpc/Predict',
            wide__and__deep__pb2.Adult.SerializeToString,
            wide__and__deep__pb2.SingleResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
